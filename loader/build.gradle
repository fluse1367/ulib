//file:noinspection GroovyAssignabilityCheck
manualDependency("BungeeCord", "bungeecord.api")
dependencySpigot()
dependencyVelocity()

dependencies {
    lazyLib('net.sf.jopt-simple:jopt-simple:6.0-alpha-3', 'jopt-simple')
    compileOnly 'net.fabricmc:fabric-loader:0.13.1'
}

ext {
    // include project jar into "META-INF/jars" folder
    projInclude = { List update, String projName ->
        var project = project(":$projName")
        dependencies {
            implementation project
        }

        jar {
            dependsOn ":$projName:jar"

            var f = ((org.gradle.jvm.tasks.Jar) project.tasks.jar).archiveFile.get().asFile
            from(f.parentFile) {
                include f.name
                into 'META-INF/jars'
            }
            update.add(f.name)
        }
    }

    modulesGraph = new LinkedHashMap<String, List<String>>()

    // include module into module graph
    inclModule = { String baseName ->
        def map = new LinkedHashMap<String, List<String>>()

        // include module jar files
        def jars = []
        ["$baseName-api", "$baseName-impl"].each { projInclude(jars, it) }
        map.put("jars", jars)

        // include module library coordinates
        def libraries = []
        ["$baseName-api", "$baseName-impl"].each {
            evaluationDependsOn ":$it" // let gradle finish the project configuration first
            project(":$it").configurations.lib.resolvedConfiguration.resolvedArtifacts.each { f ->
                libraries += f.moduleVersion.id.toString()
            }
        }
        map.put("libraries", libraries)

        modulesGraph.put(baseName, map)
    }
}

//noinspection GrUnnecessarySemicolon
jar {
    archiveBaseName.set 'ulib-loader'

    // include super module
    def modulesSuper = [];
    projInclude(modulesSuper, "super-module")
    modulesGraph.put('super', ['jars': modulesSuper])

    // include modules
    inclModule('core')
    inclModule('minecraft')
    inclModule('velocity')
    inclModule('bungeecord')
    inclModule('spigot')

    // serialize modules graph
    byte[] modulesGraphSerialized;
    {
        var bout = new ByteArrayOutputStream()
        try (var out = new ObjectOutputStream(bout)) {
            out.writeObject(modulesGraph)
        }
        modulesGraphSerialized = bout.toByteArray()
    };

    manifest.attributes([
            'Automatic-Module-Name'  : 'ulib.loader',
            'Main-Class'             : 'eu.software4you.ulib.loader.launch.Main',
            'Premain-Class'          : 'eu.software4you.ulib.loader.agent.AgentMain',
            'Agent-Class'            : 'eu.software4you.ulib.loader.agent.AgentMain',
            'Can-Redefine-Classes'   : true,
            'Can-Retransform-Classes': true,
            'Modules'                : Base64.encoder.encodeToString(modulesGraphSerialized),
            'Modules-Readable'       : modulesGraph,
    ])
}

extraJavaModuleInfo {
    automaticModule('fabric-loader-0.13.1.jar', 'fabric.loader')
}

doPubliblishment()