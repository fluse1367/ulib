import org.apache.tools.ant.filters.ReplaceTokens

import static java.util.Optional.ofNullable

// plugin support
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:6.3.0"
        classpath "de.jjohannes.gradle:extra-java-module-info:0.9"
    }
}

ext {
    gitCommitHash = { ->
        try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', '--short', 'HEAD'
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } catch (Exception ignored) {
            return "unknown"
        }
    }
}

//noinspection GrUnnecessarySemicolon
subprojects {
    // plugins
    {
        apply plugin: 'java-library'
        apply plugin: "io.freefair.lombok"
        apply plugin: "de.jjohannes.extra-java-module-info"
    }

    // project meta settings
    {
        def major = 3, minor = 0, patch = 0
        // evaluate variation
        String variation
        switch (ofNullable((String) project.findProperty('variation')).orElse('snapshot').toLowerCase()) {
            case 'release':
                variation = ''
                break
            case 'beta':
                variation = "BETA-${ofNullable((String) project.findProperty('beta')).orElse(('0'))}"
                break
            case 'snapshot':
                // fallthrough to default
            default:
                variation = 'SNAPSHOT'
        }

        group 'eu.software4you.ulib'
        version "$major.$minor.$patch${variation.isEmpty() ? '' : "-$variation"}"
    }

    // lib including
    configurations {
        libOnly {

        }
        lib {
            canBeResolved = true
            extendsFrom libOnly
        }
        api {
            extendsFrom lib
        }
    }; // <- for somewhat reason the build fails without this semicolon


    // dependencies
    {
        repositories {
            mavenCentral()
        }

        dependencies {
            compileOnly 'org.jetbrains:annotations:22.0.0'
        }

        // quick functions to declare dependencies dynamically
        ext {
            // spigot
            dependencySpigot = {
                repositories {
                    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
                    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } // for bungeecord chat
                }
                dependencies {
                    compileOnly 'org.spigotmc:spigot-api:1.18.1-R0.1-SNAPSHOT'
                }
            }

            // bungeecord
            dependencyBungee = {
                repositories {
                    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
                }
                dependencies {
                    compileOnly 'net.md-5:bungeecord-api:1.17-R0.1-SNAPSHOT'
                }
                extraJavaModuleInfo {
                    automaticModule('bungeecord-api-1.17-R0.1-SNAPSHOT.jar', 'bungeecord.api')
                }
            }

            // velocity
            dependencyVelocity = {
                repositories {
                    maven { url 'https://nexus.velocitypowered.com/repository/maven-public/' }
                }
                dependencies {
                    compileOnly 'com.velocitypowered:velocity-api:3.0.1'
                    annotationProcessor 'com.velocitypowered:velocity-api:3.0.1'
                }
            }
        }
    }

    java {
        sourceCompatibility = '17'
    }

    // manifest data
    jar.manifest.attributes([
            'Implementation-Title'  : "ulib-${project.name}",
            'Implementation-Version': "${version}-${gitCommitHash()}",
            'Specification-Version' : version,
            'Implementation-Vendor' : 'Software4You.eu',
            'Built-By'              : "${System.getProperty('os.name')} ${System.getProperty('os.version')}",
            'Build-Jdk'             : "${System.getProperty('java.vendor')} ${System.getProperty('java.version')}",
            'Created-By'            : "Gradle ${gradle.gradleVersion}",
    ])

    // lazyLib
    ext {
        lazyLib = { coords, name ->
            replacementTokens.putIfAbsent(new String("maven.$name"), new String("$coords"))
            dependencies {
                implementation(coords)
            }
        }
    }

    // legacy dependencies
    extraJavaModuleInfo {
        failOnMissingModuleInfo = false
    };

    // replace tokens
    {
        ext {
            replacementTokens = new Properties()
            replacementTokens.putAll([
                    'maven.mysql' : 'mysql:mysql-connector-java:8.0.23',
                    'maven.sqlite': 'org.xerial:sqlite-jdbc:3.25.2',
            ])
        }

        // make all project properties available
        project.properties.forEach({ k, v ->
            if (k == null || v == null)
                return
            replacementTokens.put('project.' + k, (String) v)
        })

        // replace patterns in source code
        task processSources(type: Sync) {
            from sourceSets.main.java.srcDirs
            filter ReplaceTokens, beginToken: '{{', endToken: '}}', tokens: replacementTokens
            into "$buildDir/src"
        }
        compileJava.source = processSources.outputs

        // replace patterns in resource files
        processResources {
            filter ReplaceTokens, beginToken: '{{', endToken: '}}', tokens: replacementTokens
        }
    };

}